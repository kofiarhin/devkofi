name: Deploy client + server

on:
  push:
    branches: [master, main]
    paths:
      - "client/**"
      - "server/**"
      - ".github/workflows/**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- Frontend -> Namecheap ----------
  deploy_client:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Build client
        working-directory: client
        run: |
          npm ci
          npm run build

      - name: Upload dist to Namecheap (root public_html)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          protocol: ${{ secrets.FTP_PROTOCOL }}
          local-dir: client/dist/
          server-dir: /
          exclude: |
            **/.git*
            **/.github/**
            **/node_modules/**

  # ---------- Backend -> Heroku ----------
  deploy_heroku:
    runs-on: ubuntu-latest
    needs: [deploy_client]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku --version

      - name: Reset Heroku buildpacks to Node
        run: |
          heroku buildpacks:clear -a devkofi || true
          heroku buildpacks:set heroku/nodejs -a devkofi

      - name: Ensure Procfile exists in server/
        run: |
          echo "web: node server.js" > server/Procfile
          cat server/Procfile

      - name: Force-push server/ subtree to Heroku main
        env:
          HEROKU_GIT: https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/devkofi.git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name  "GitHub Action"
          SUBTREE_SHA=$(git subtree split --prefix server HEAD)
          echo "Subtree SHA: $SUBTREE_SHA"
          git push --force "$HEROKU_GIT" "$SUBTREE_SHA:main"

      - name: Health check (retry until 200)
        shell: bash
        env:
          HEROKU_URL: https://devkofi-883f1d7b0ba0.herokuapp.com
          HEALTH_PATH: /health
        run: |
          set -e
          ATTEMPTS=20
          SLEEP=10
          for ((i=1;i<=ATTEMPTS;i++)); do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$HEROKU_URL$HEALTH_PATH")
            echo "Attempt $i/$ATTEMPTS → HTTP $CODE"
            if [ "$CODE" -eq 200 ]; then
              echo "Health check passed ✅"
              exit 0
            fi
            sleep $SLEEP
          done
          echo "Health check failed ❌ after $ATTEMPTS attempts"
          exit 1

      - name: Print recent Heroku logs on failure
        if: failure()
        run: heroku logs -n 300 -a devkofi || true

  # ---------- Post-deploy Browser E2E Tests ----------
  e2e_login_chat_test:
    runs-on: ubuntu-latest
    needs: [deploy_client, deploy_heroku]
    steps:
      - uses: actions/checkout@v4

      - name: Quick homepage status
        shell: bash
        run: |
          echo "Checking https://devkofi.com/ ..."
          CODE=$(curl -s -o /dev/null -w "%{http_code}" https://devkofi.com/)
          echo "HTTP status: $CODE"
          if [ "$CODE" -eq 200 ]; then
            echo "✅ Homepage is live"
          else
            echo "❌ Homepage returned $CODE"
            exit 1
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Playwright
        run: |
          npm init -y
          npm install @playwright/test
          npx playwright install --with-deps

      - name: Create Playwright test for login + chat
        run: |
          mkdir -p tests
          cat << 'EOF' > tests/login-chat.spec.js
          const { test, expect } = require('@playwright/test');

          const fillEmail = async (page, value) => {
            const email = page.locator('input[name="email"], input[type="email"], [placeholder*="email" i]');
            await email.first().fill(value);
          };
          const fillPassword = async (page, value) => {
            const pass = page.locator('input[name="password"], input[type="password"], [placeholder*="password" i]');
            await pass.first().fill(value);
          };
          const clickSubmit = async (page) => {
            const btn = page.locator('button[type="submit"], button:has-text("Login"), button:has-text("Sign in"), [role="button"]:has-text("Login")');
            await btn.first().click();
          };

          test('Login and test chat interaction', async ({ page }) => {
            // Navigate to login
            await page.goto('https://devkofi.com/login', { waitUntil: 'domcontentloaded' });
            await fillEmail(page, 'test@gmail.com');
            await fillPassword(page, 'password');
            await clickSubmit(page);

            // Wait for redirect after login
            await page.waitForURL(/^(?!.*\/login\b).*$/, { timeout: 10000 });

            // Go to chat page
            await page.goto('https://devkofi.com/chat', { waitUntil: 'domcontentloaded' });

            // Wait for send button
            const sendButton = page.locator('button:has-text("Send"), [role="button"]:has-text("Send")');
            await sendButton.first().waitFor({ state: 'visible', timeout: 8000 });

            // Click send button
            await sendButton.first().click();

            // Wait for chat response to appear
            const responseLocator = page.locator('.chat-response, .message-bot, .response, text=/response|reply|bot|message/i');
            await expect(responseLocator.first()).toBeVisible({ timeout: 10000 });
          });
          EOF

      - name: Run Playwright test
        run: npx playwright test tests/login-chat.spec.js --reporter=line
