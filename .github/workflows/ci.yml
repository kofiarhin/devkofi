name: Deploy client + server

on:
  push:
    branches: [master, main]
    paths:
      - "client/**"
      - "server/**"
      - ".github/workflows/**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- Frontend -> Namecheap ----------
  deploy_client:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Build client
        working-directory: client
        run: |
          npm ci
          npm run build   # outputs client/dist

      - name: Upload dist to Namecheap (root public_html)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }} # e.g. 21
          protocol: ${{ secrets.FTP_PROTOCOL }} # e.g. ftps
          local-dir: client/dist/
          server-dir: / # home == public_html on Namecheap
          exclude: |
            **/.git*
            **/.github/**
            **/node_modules/**

  # ---------- Backend -> Heroku ----------
  deploy_heroku:
    runs-on: ubuntu-latest
    needs: [deploy_client] # remove if you want parallel jobs
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku --version

      - name: Reset Heroku buildpacks to Node (once per run; idempotent)
        run: |
          heroku buildpacks:clear -a devkofi || true
          heroku buildpacks:set heroku/nodejs -a devkofi
          heroku buildpacks -a devkofi

      - name: Ensure Procfile exists in server/
        run: |
          echo "web: node server.js" > server/Procfile
          cat server/Procfile

      - name: Force-push server/ subtree to Heroku main
        env:
          HEROKU_GIT: https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/devkofi.git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name  "GitHub Action"
          # Create a commit consisting only of server/ and force update Heroku main
          SUBTREE_SHA=$(git subtree split --prefix server HEAD)
          echo "Subtree SHA: $SUBTREE_SHA"
          git push --force "$HEROKU_GIT" "$SUBTREE_SHA:main"

      - name: Health check (retry until 200)
        shell: bash
        env:
          HEROKU_URL: https://devkofi-883f1d7b0ba0.herokuapp.com
          HEALTH_PATH: /health
        run: |
          set -e
          ATTEMPTS=20
          SLEEP=10
          for ((i=1;i<=ATTEMPTS;i++)); do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$HEROKU_URL$HEALTH_PATH")
            echo "Attempt $i/$ATTEMPTS → HTTP $CODE"
            if [ "$CODE" -eq 200 ]; then
              echo "Health check passed ✅"
              exit 0
            fi
            sleep $SLEEP
          done
          echo "Health check failed ❌ after $ATTEMPTS attempts"
          exit 1

      - name: Print recent Heroku logs on failure
        if: failure()
        run: heroku logs -n 300 -a devkofi || true

  # ---------- Post-deploy Browser E2E: Login + Chat ----------
  e2e_login_chat_test:
    runs-on: ubuntu-latest
    needs: [deploy_client, deploy_heroku]
    steps:
      - uses: actions/checkout@v4

      - name: Quick homepage status
        shell: bash
        run: |
          echo "Checking https://devkofi.com/ ..."
          CODE=$(curl -s -o /dev/null -w "%{http_code}" https://devkofi.com/)
          echo "HTTP status: $CODE"
          if [ "$CODE" -eq 200 ]; then
            echo "✅ Homepage is live"
          else
            echo "❌ Homepage returned $CODE"
            exit 1
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Playwright
        run: |
          npm init -y
          npm install @playwright/test
          npx playwright install --with-deps

      - name: Create Playwright test for login + chat
        run: |
          mkdir -p tests
          cat << 'EOF' > tests/login-chat.spec.js
          const { test, expect } = require('@playwright/test');

          const findMessageInput = async (page) => {
            const byPlaceholder = page.getByPlaceholder(/message|type.*message|ask|prompt/i);
            if (await byPlaceholder.first().count()) return byPlaceholder.first();

            const generic = page.locator([
              'textarea[name="message"]',
              'textarea[id*="message" i]',
              'input[name="message"]',
              'input[id*="message" i]',
              'textarea',
              'input[type="text"]',
              'input[type="search"]'
            ].join(', '));
            if (await generic.first().count()) return generic.first();

            const editable = page.locator('[contenteditable="true"], [role="textbox"]');
            if (await editable.first().count()) return editable.first();

            throw new Error('Message input not found');
          };

          const clickSendIfPresent = async (page) => {
            const send = page.locator([
              'button[type="submit"]',
              'button:has-text("Send")',
              '[role="button"]:has-text("Send")',
              'button[aria-label*="send" i]',
              '[aria-label*="send" i]',
              'button[title*="send" i]',
              '[data-testid="send-button"]'
            ].join(', '));
            if (await send.first().isVisible().catch(() => false)) {
              await send.first().click();
              return true;
            }
            return false;
          };

          test('Login then send a chat message and receive a response', async ({ page }) => {
            // --- Login ---
            await page.goto('https://devkofi.com/login', { waitUntil: 'domcontentloaded' });

            const email = page.locator('input[name="email"], input[type="email"], [placeholder*="email" i]');
            await email.first().fill('test@gmail.com');

            const password = page.locator('input[name="password"], input[type="password"], [placeholder*="password" i]');
            await password.first().fill('password');

            const loginBtn = page.locator('button[type="submit"], button:has-text("Login"), button:has-text("Sign in"), [role="button"]:has-text("Login")');
            await loginBtn.first().click();

            await page.waitForURL(/^(?!.*\/login\b).*$/, { timeout: 15000 });

            // --- Chat page ---
            await page.goto('https://devkofi.com/chat', { waitUntil: 'domcontentloaded' });
            await page.waitForLoadState('networkidle', { timeout: 10000 });

            // Baseline message count
            const messages = page.locator([
              '.message', '.chat-message', '.assistant', '.bot', '.user',
              '[data-message]', '[data-role="message"]', '[role="listitem"]',
              '.chat-response', '.message-bot', '.response'
            ].join(', '));
            const beforeCount = await messages.count();

            // Type prompt
            const input = await findMessageInput(page);
            await input.click();
            await input.fill('Hello! This is an automated post-deploy check. Please respond.');

            // Send (button or Enter)
            const clicked = await clickSendIfPresent(page);
            if (!clicked) {
              await page.keyboard.press('Enter');
            }

            // Wait for a new message to appear
            await expect
              .poll(async () => await messages.count(), {
                message: 'Waiting for a new chat message to appear',
                intervals: [500, 750, 1000],
                timeout: 20000
              })
              .toBeGreaterThan(beforeCount);

            // Best-effort: verify assistant-like element visible (optional hardening)
            const assistantLike = page.locator('.assistant, .message-bot, .chat-response, [data-role="assistant"]');
            if (await assistantLike.count()) {
              await expect(assistantLike.first()).toBeVisible();
            }
          });
          EOF

      - name: Run Playwright test
        run: npx playwright test tests/login-chat.spec.js --reporter=html,line

      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7
name: Deploy client + server

on:
  push:
    branches: [master, main]
    paths:
      - "client/**"
      - "server/**"
      - ".github/workflows/**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- Frontend -> Namecheap ----------
  deploy_client:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Build client
        working-directory: client
        run: |
          npm ci
          npm run build   # outputs client/dist

      - name: Upload dist to Namecheap (root public_html)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }} # e.g. 21
          protocol: ${{ secrets.FTP_PROTOCOL }} # e.g. ftps
          local-dir: client/dist/
          server-dir: / # home == public_html on Namecheap
          exclude: |
            **/.git*
            **/.github/**
            **/node_modules/**

  # ---------- Backend -> Heroku ----------
  deploy_heroku:
    runs-on: ubuntu-latest
    needs: [deploy_client] # remove if you want parallel jobs
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku --version

      - name: Reset Heroku buildpacks to Node (once per run; idempotent)
        run: |
          heroku buildpacks:clear -a devkofi || true
          heroku buildpacks:set heroku/nodejs -a devkofi
          heroku buildpacks -a devkofi

      - name: Ensure Procfile exists in server/
        run: |
          echo "web: node server.js" > server/Procfile
          cat server/Procfile

      - name: Force-push server/ subtree to Heroku main
        env:
          HEROKU_GIT: https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/devkofi.git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name  "GitHub Action"
          # Create a commit consisting only of server/ and force update Heroku main
          SUBTREE_SHA=$(git subtree split --prefix server HEAD)
          echo "Subtree SHA: $SUBTREE_SHA"
          git push --force "$HEROKU_GIT" "$SUBTREE_SHA:main"

      - name: Health check (retry until 200)
        shell: bash
        env:
          HEROKU_URL: https://devkofi-883f1d7b0ba0.herokuapp.com
          HEALTH_PATH: /health
        run: |
          set -e
          ATTEMPTS=20
          SLEEP=10
          for ((i=1;i<=ATTEMPTS;i++)); do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$HEROKU_URL$HEALTH_PATH")
            echo "Attempt $i/$ATTEMPTS → HTTP $CODE"
            if [ "$CODE" -eq 200 ]; then
              echo "Health check passed ✅"
              exit 0
            fi
            sleep $SLEEP
          done
          echo "Health check failed ❌ after $ATTEMPTS attempts"
          exit 1

      - name: Print recent Heroku logs on failure
        if: failure()
        run: heroku logs -n 300 -a devkofi || true

  # ---------- Post-deploy Browser E2E: Login + Chat ----------
  e2e_login_chat_test:
    runs-on: ubuntu-latest
    needs: [deploy_client, deploy_heroku]
    steps:
      - uses: actions/checkout@v4

      - name: Quick homepage status
        shell: bash
        run: |
          echo "Checking https://devkofi.com/ ..."
          CODE=$(curl -s -o /dev/null -w "%{http_code}" https://devkofi.com/)
          echo "HTTP status: $CODE"
          if [ "$CODE" -eq 200 ]; then
            echo "✅ Homepage is live"
          else
            echo "❌ Homepage returned $CODE"
            exit 1
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Playwright
        run: |
          npm init -y
          npm install @playwright/test
          npx playwright install --with-deps

      - name: Create Playwright test for login + chat
        run: |
          mkdir -p tests
          cat << 'EOF' > tests/login-chat.spec.js
          const { test, expect } = require('@playwright/test');

          const findMessageInput = async (page) => {
            const byPlaceholder = page.getByPlaceholder(/message|type.*message|ask|prompt/i);
            if (await byPlaceholder.first().count()) return byPlaceholder.first();

            const generic = page.locator([
              'textarea[name="message"]',
              'textarea[id*="message" i]',
              'input[name="message"]',
              'input[id*="message" i]',
              'textarea',
              'input[type="text"]',
              'input[type="search"]'
            ].join(', '));
            if (await generic.first().count()) return generic.first();

            const editable = page.locator('[contenteditable="true"], [role="textbox"]');
            if (await editable.first().count()) return editable.first();

            throw new Error('Message input not found');
          };

          const clickSendIfPresent = async (page) => {
            const send = page.locator([
              'button[type="submit"]',
              'button:has-text("Send")',
              '[role="button"]:has-text("Send")',
              'button[aria-label*="send" i]',
              '[aria-label*="send" i]',
              'button[title*="send" i]',
              '[data-testid="send-button"]'
            ].join(', '));
            if (await send.first().isVisible().catch(() => false)) {
              await send.first().click();
              return true;
            }
            return false;
          };

          test('Login then send a chat message and receive a response', async ({ page }) => {
            // --- Login ---
            await page.goto('https://devkofi.com/login', { waitUntil: 'domcontentloaded' });

            const email = page.locator('input[name="email"], input[type="email"], [placeholder*="email" i]');
            await email.first().fill('test@gmail.com');

            const password = page.locator('input[name="password"], input[type="password"], [placeholder*="password" i]');
            await password.first().fill('password');

            const loginBtn = page.locator('button[type="submit"], button:has-text("Login"), button:has-text("Sign in"), [role="button"]:has-text("Login")');
            await loginBtn.first().click();

            await page.waitForURL(/^(?!.*\/login\b).*$/, { timeout: 15000 });

            // --- Chat page ---
            await page.goto('https://devkofi.com/chat', { waitUntil: 'domcontentloaded' });
            await page.waitForLoadState('networkidle', { timeout: 10000 });

            // Baseline message count
            const messages = page.locator([
              '.message', '.chat-message', '.assistant', '.bot', '.user',
              '[data-message]', '[data-role="message"]', '[role="listitem"]',
              '.chat-response', '.message-bot', '.response'
            ].join(', '));
            const beforeCount = await messages.count();

            // Type prompt
            const input = await findMessageInput(page);
            await input.click();
            await input.fill('Hello! This is an automated post-deploy check. Please respond.');

            // Send (button or Enter)
            const clicked = await clickSendIfPresent(page);
            if (!clicked) {
              await page.keyboard.press('Enter');
            }

            // Wait for a new message to appear
            await expect
              .poll(async () => await messages.count(), {
                message: 'Waiting for a new chat message to appear',
                intervals: [500, 750, 1000],
                timeout: 20000
              })
              .toBeGreaterThan(beforeCount);

            // Best-effort: verify assistant-like element visible (optional hardening)
            const assistantLike = page.locator('.assistant, .message-bot, .chat-response, [data-role="assistant"]');
            if (await assistantLike.count()) {
              await expect(assistantLike.first()).toBeVisible();
            }
          });
          EOF

      - name: Run Playwright test
        run: npx playwright test tests/login-chat.spec.js --reporter=html,line

      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7
name: Deploy client + server

on:
  push:
    branches: [master, main]
    paths:
      - "client/**"
      - "server/**"
      - ".github/workflows/**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- Frontend -> Namecheap ----------
  deploy_client:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Build client
        working-directory: client
        run: |
          npm ci
          npm run build   # outputs client/dist

      - name: Upload dist to Namecheap (root public_html)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }} # e.g. 21
          protocol: ${{ secrets.FTP_PROTOCOL }} # e.g. ftps
          local-dir: client/dist/
          server-dir: / # home == public_html on Namecheap
          exclude: |
            **/.git*
            **/.github/**
            **/node_modules/**

  # ---------- Backend -> Heroku ----------
  deploy_heroku:
    runs-on: ubuntu-latest
    needs: [deploy_client] # remove if you want parallel jobs
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku --version

      - name: Reset Heroku buildpacks to Node (once per run; idempotent)
        run: |
          heroku buildpacks:clear -a devkofi || true
          heroku buildpacks:set heroku/nodejs -a devkofi
          heroku buildpacks -a devkofi

      - name: Ensure Procfile exists in server/
        run: |
          echo "web: node server.js" > server/Procfile
          cat server/Procfile

      - name: Force-push server/ subtree to Heroku main
        env:
          HEROKU_GIT: https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/devkofi.git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name  "GitHub Action"
          # Create a commit consisting only of server/ and force update Heroku main
          SUBTREE_SHA=$(git subtree split --prefix server HEAD)
          echo "Subtree SHA: $SUBTREE_SHA"
          git push --force "$HEROKU_GIT" "$SUBTREE_SHA:main"

      - name: Health check (retry until 200)
        shell: bash
        env:
          HEROKU_URL: https://devkofi-883f1d7b0ba0.herokuapp.com
          HEALTH_PATH: /health
        run: |
          set -e
          ATTEMPTS=20
          SLEEP=10
          for ((i=1;i<=ATTEMPTS;i++)); do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$HEROKU_URL$HEALTH_PATH")
            echo "Attempt $i/$ATTEMPTS → HTTP $CODE"
            if [ "$CODE" -eq 200 ]; then
              echo "Health check passed ✅"
              exit 0
            fi
            sleep $SLEEP
          done
          echo "Health check failed ❌ after $ATTEMPTS attempts"
          exit 1

      - name: Print recent Heroku logs on failure
        if: failure()
        run: heroku logs -n 300 -a devkofi || true

  # ---------- Post-deploy Browser E2E: Login + Chat ----------
  e2e_login_chat_test:
    runs-on: ubuntu-latest
    needs: [deploy_client, deploy_heroku]
    steps:
      - uses: actions/checkout@v4

      - name: Quick homepage status
        shell: bash
        run: |
          echo "Checking https://devkofi.com/ ..."
          CODE=$(curl -s -o /dev/null -w "%{http_code}" https://devkofi.com/)
          echo "HTTP status: $CODE"
          if [ "$CODE" -eq 200 ]; then
            echo "✅ Homepage is live"
          else
            echo "❌ Homepage returned $CODE"
            exit 1
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Playwright
        run: |
          npm init -y
          npm install @playwright/test
          npx playwright install --with-deps

      - name: Create Playwright test for login + chat
        run: |
          mkdir -p tests
          cat << 'EOF' > tests/login-chat.spec.js
          const { test, expect } = require('@playwright/test');

          const findMessageInput = async (page) => {
            const byPlaceholder = page.getByPlaceholder(/message|type.*message|ask|prompt/i);
            if (await byPlaceholder.first().count()) return byPlaceholder.first();

            const generic = page.locator([
              'textarea[name="message"]',
              'textarea[id*="message" i]',
              'input[name="message"]',
              'input[id*="message" i]',
              'textarea',
              'input[type="text"]',
              'input[type="search"]'
            ].join(', '));
            if (await generic.first().count()) return generic.first();

            const editable = page.locator('[contenteditable="true"], [role="textbox"]');
            if (await editable.first().count()) return editable.first();

            throw new Error('Message input not found');
          };

          const clickSendIfPresent = async (page) => {
            const send = page.locator([
              'button[type="submit"]',
              'button:has-text("Send")',
              '[role="button"]:has-text("Send")',
              'button[aria-label*="send" i]',
              '[aria-label*="send" i]',
              'button[title*="send" i]',
              '[data-testid="send-button"]'
            ].join(', '));
            if (await send.first().isVisible().catch(() => false)) {
              await send.first().click();
              return true;
            }
            return false;
          };

          test('Login then send a chat message and receive a response', async ({ page }) => {
            // --- Login ---
            await page.goto('https://devkofi.com/login', { waitUntil: 'domcontentloaded' });

            const email = page.locator('input[name="email"], input[type="email"], [placeholder*="email" i]');
            await email.first().fill('test@gmail.com');

            const password = page.locator('input[name="password"], input[type="password"], [placeholder*="password" i]');
            await password.first().fill('password');

            const loginBtn = page.locator('button[type="submit"], button:has-text("Login"), button:has-text("Sign in"), [role="button"]:has-text("Login")');
            await loginBtn.first().click();

            await page.waitForURL(/^(?!.*\/login\b).*$/, { timeout: 15000 });

            // --- Chat page ---
            await page.goto('https://devkofi.com/chat', { waitUntil: 'domcontentloaded' });
            await page.waitForLoadState('networkidle', { timeout: 10000 });

            // Baseline message count
            const messages = page.locator([
              '.message', '.chat-message', '.assistant', '.bot', '.user',
              '[data-message]', '[data-role="message"]', '[role="listitem"]',
              '.chat-response', '.message-bot', '.response'
            ].join(', '));
            const beforeCount = await messages.count();

            // Type prompt
            const input = await findMessageInput(page);
            await input.click();
            await input.fill('Hello! This is an automated post-deploy check. Please respond.');

            // Send (button or Enter)
            const clicked = await clickSendIfPresent(page);
            if (!clicked) {
              await page.keyboard.press('Enter');
            }

            // Wait for a new message to appear
            await expect
              .poll(async () => await messages.count(), {
                message: 'Waiting for a new chat message to appear',
                intervals: [500, 750, 1000],
                timeout: 20000
              })
              .toBeGreaterThan(beforeCount);

            // Best-effort: verify assistant-like element visible (optional hardening)
            const assistantLike = page.locator('.assistant, .message-bot, .chat-response, [data-role="assistant"]');
            if (await assistantLike.count()) {
              await expect(assistantLike.first()).toBeVisible();
            }
          });
          EOF

      - name: Run Playwright test
        run: npx playwright test tests/login-chat.spec.js --reporter=html,line

      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7
